@page "/User/Login"
@inject HttpClient Http
@using BookingHotel.Models
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthStateService AuthState

<h3>Вхід</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<EditForm Model="@loginModel" OnValidSubmit="Send">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="form-group">
        <label for="password">Пароль:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Увійти</button>
</EditForm>

<p>Немає акаунту? <a href="/User/Register">Зареєструватись</a></p>

@code {
    private UserLoginModel loginModel = new();
    private string error = string.Empty;

    private async Task Send()
    {
        var response = await Http.PostAsJsonAsync("api/Account/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
            await LocalStorage.SetItemAsync("authToken", result!.Token);
            AuthState.SetLoginState(true);
            Navigation.NavigateTo("/");
        }
        else
        {
            error = await response.Content.ReadAsStringAsync();
        }
    }

    public class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
        public DateTime Expiration { get; set; }
    }
}